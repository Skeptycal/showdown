#!/usr/bin/env lua

local lgi = require "lgi"
local markdown = require "discount"

debug.traceback = nil -- Keep error messages short

local filename = select(1, ...)
assert(filename, "No file was specified\nUsage: showdown FILE\n")

local Gio = lgi.Gio
local file = Gio.File.new_for_path(filename)
assert(file:query_exists(), "File doesn't exist")

local Gtk = lgi.Gtk
local Gdk = lgi.Gdk
local WebKit2 = lgi.WebKit2

local app = Gtk.Application.new("org.showdown", Gio.ApplicationFlags.FLAGS_NONE)
local window

local template = [[
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Markdown Preview</title>
    <style>
        body {
            margin: 15px;
            font: 14px/1.6 Helvetica, arial, freesans, clean, sans-serif;
            color: #333;
        }
        a {
            color: #4183C4;
            text-decoration: none;
        }
        a:hover {
            color: #ff6600;
            text-decoration: none;
        }
        h1, h2, h3, h4, h5, h6 {
            margin: 20px 0 10px;
            padding: 0;
            font-weight: bold;
        }
        h2 {
            font-size: 24px;
            line-height: 1.6;
            border-bottom: 1px solid #CCC;
        }
        pre, code, tt {
            font: normal 12px/19px Consolas, Courier, monospace;
        }
        pre {
            background-color: #F8F8F8;
            border: 1px solid #CCC;
            overflow: auto;
            padding: 6px 10px;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    %s
</body>
</html>
]]

app.on_startup = function()
    local pwd = os.getenv("PWD")

    local webview = WebKit2.WebView {
        on_load_changed = function(self, event)
            if event == "STARTED" and self.uri ~= pwd then
                window.title = "Hit Backspace to return to " .. filename
            end
        end
    }

    local function reload()
        local text = assert(file:load_contents())
        local html = template:format(markdown(tostring(text)))
        webview:load_html(html, pwd)
    end

    window = Gtk.ApplicationWindow {
        type = Gtk.WindowType.TOPLEVEL,
        application = app,
        title = filename,
        icon_name = "showdown",
        hide_titlebar_when_maximized = true,
        default_width = 580,
        default_height = 500,
        webview,
        on_show = function()
            reload()
        end,
        on_key_press_event = function(widget, event)
            if Gdk.keyval_name(event.keyval) == "BackSpace" then
                reload()
                widget.title = filename
                urichanged = false
                return true
            end
        end
    }
    window:set_wmclass("showdown", "showdown")

    local about = Gtk.AboutDialog {
        program_name = "Showdown",
        logo_icon_name = "showdown",
        comments = "Simple Markdown viewer",
        version = "0.1",
        copyright = "Copyright 2013 Craig Barnes",
        license_type = Gtk.License.GPL_3_0,
        website = "https://github.com/craigbarnes/showdown"
    }

    local appmenu = Gio.Menu()
    appmenu:append("About", "app.about")
    appmenu:append("Quit", "app.quit")
    app:set_app_menu(appmenu)

    app:add_action(Gio.SimpleAction {
        name = "about",
        on_activate = function()
            about:run()
            about:hide()
        end
    })

    app:add_action(Gio.SimpleAction {
        name = "quit",
        on_activate = function()
            app:quit()
        end
    })

    local monitor = file:monitor(lgi.Gio.FileMonitorFlags.NONE)
    monitor.on_changed = function(self, file, ud, event)
        if event == "CHANGED" then
            reload()
        end
    end
end

app.on_activate = function()
    window:show_all()
end

return app:run()
